using System.Numerics;

/* The below code is implementing extension methods for the BigInteger class in C#. It includes
methods for checking if a BigInteger is probably prime using the Miller-Rabin primality test,
generating a random BigInteger between 2 and n-2, checking if a BigInteger is prime by iterating
through a list of pre-generated prime numbers, generating a prime number of a specified number
of bits using parallel processing, and generating a list of prime numbers up to a given limit
using a naive approach. */
namespace rsa.src.primekeygeneration.primeextension
{
    public static class PrimeExtension
    {
        private static SecureRandomNamespace.SecureRandom secureRandom = new SecureRandomNamespace.SecureRandom();
        private static readonly object lockObj = new object();

        public static List<BigInteger> autoGeneratedPrimes = new List<BigInteger>();


        /// <summary>
        /// The IsProbablyPrime function checks if a given BigInteger is probably a prime number using the
        /// Miller-Rabin primality test.
        /// </summary>
        /// <param name="BigInteger">BigInteger is a data type in C# that represents an arbitrarily large
        /// integer. It can store integers of any size, limited only by the available memory. In the given code,
        /// BigInteger is used to perform calculations on large numbers.</param>
        /// <param name="k">The parameter "k" represents the number of iterations to perform in the Miller-Rabin
        /// primality test. The higher the value of "k", the more accurate the primality test will be, but it
        /// will also take longer to execute. By default, the value of "k" is set to</param>
        /// <returns>
        /// The method is returning a boolean value. It returns true if the given BigInteger number is probably
        /// prime, and false if it is not.
        /// </returns>
        private static bool IsProbablyPrime(this BigInteger n, int k = 10)
        {
            if (n <= 3)
            {
                return n == 2;
            }
            BigInteger d = n - 1;
            int r = 0;
            while (d % 2 == 0)
            {
                d /= 2;
                r++;
            }
            for (int i = 0; i < k; i++)
            {
                BigInteger a = GetRandomA(n);
                BigInteger x = BigInteger.ModPow(a, d, n);
                if (x == 1 || x == n - 1)
                {
                    continue;
                }
                for (int j = 0; j < r - 1; j++)
                {
                    x = BigInteger.ModPow(x, 2, n);
                    if (x == n - 1)
                    {
                        continue;
                    }
                }
                return false;
            }
            return true;
        }

        /// <summary>
        /// The function `GetRandomA` generates a random BigInteger between 2 and `n - 2`.
        /// </summary>
        /// <param name="BigInteger">The BigInteger class in Java is used to represent arbitrary-precision
        /// integers. It can handle integers of any size and provides various methods for performing arithmetic
        /// operations on them.</param>
        /// <returns>
        /// The method is returning a randomly generated BigInteger value that is greater than or equal to 2 and
        /// less than n - 2.
        /// </returns>
        public static BigInteger GetRandomA(BigInteger n)
        {
            while (true)
            {
                byte[] randomBytes = new byte[n.ToByteArray().Length];
                secureRandom.NextBytes(randomBytes);
                BigInteger randomBigInteger = new BigInteger(randomBytes);
                if (randomBigInteger >= 2 && randomBigInteger < n - 2)
                {
                    return randomBigInteger;
                }
            }
        }

        /// <summary>
        /// The function checks if a given BigInteger is a prime number by iterating through a list of
        /// pre-generated prime numbers and checking if the candidate number is divisible by any of them.
        /// </summary>
        /// <param name="BigInteger">BigInteger is a data type in C# that represents an arbitrarily large
        /// integer. It can hold very large numbers that are beyond the range of other integer data types like
        /// int or long. In the given code, the parameter "candidate" is of type BigInteger and represents a
        /// number that needs to be checked for</param>
        /// <returns>
        /// The method is returning a boolean value.
        /// </returns>
        public static bool CheckPrime(BigInteger candidate)
        {
            foreach (BigInteger prime in autoGeneratedPrimes)
            {
                if (BigInteger.Compare(candidate, prime) < 0)
                {
                    return true;
                }
                if (candidate % prime == 0)
                {
                    return false;
                }
            }
            return true;
        }

        /// <summary>
        /// The function generates a prime number of a specified number of bits using parallel processing.
        /// </summary>
        /// <param name="bits">The "bits" parameter represents the number of bits the generated prime number
        /// should have.</param>
        /// <returns>
        /// The method is returning a BigInteger, which is the generated prime number.
        /// </returns>
        public static BigInteger GeneratePrime(int bits)
        {
            BigInteger primeCandidate = BigInteger.Zero;
            var cts = new CancellationTokenSource();
            int byteLength = bits / 8;
            Parallel.For(0, Int32.MaxValue, (i, state) =>
            {
                if (cts.Token.IsCancellationRequested)
                {
                    state.Stop();
                    return;
                }

                BigInteger candidate;
                lock (lockObj)
                {
                    if (state.IsStopped)
                    {
                        return;
                    }
                    byte[] randomBytes = new byte[byteLength];
                    secureRandom.NextBytes(randomBytes);
                    candidate = BigInteger.Abs(new BigInteger(randomBytes));
                }

                if (!CheckPrime(candidate))
                {
                    return;
                }

                if (candidate.IsProbablyPrime())
                {
                    byte[] candidateBytes = candidate.ToByteArray();
                    primeCandidate = new BigInteger(candidateBytes, isUnsigned: true, isBigEndian: false);
                    cts.Cancel();
                    state.Stop();
                }
                else
                {
                }
            });
            cts.Dispose();
            return primeCandidate;
        }

        /// <summary>
        /// The function "GeneratePrimesNaive" generates a list of prime numbers up to a given limit using a
        /// naive approach.
        /// </summary>
        /// <param name="n">The parameter "n" represents the number of prime numbers to be generated.</param>
        public static void GeneratePrimesNaive(int n)
        {
            autoGeneratedPrimes.Add(2);
            int nextPrime = 3;

            while (autoGeneratedPrimes.Count < n)
            {
                int sqrt = (int)Math.Sqrt(nextPrime);
                bool isPrime = true;
                for (int i = 0; (int)autoGeneratedPrimes[i] <= sqrt; i++)
                {
                    if (nextPrime % autoGeneratedPrimes[i] == 0)
                    {
                        isPrime = false;
                        break;
                    }
                }
                if (isPrime)
                {
                    autoGeneratedPrimes.Add(nextPrime);
                }
                nextPrime += 2;
            }
        }


    }// PrimeExtension
}// ExtensionMethod 